package model

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"time"
)

type VulnRecord struct {
	VulnRecordKey

	Owner          string
	RepoName       string
	IssueID        int
	IssueState     string
	LastModifiedAt time.Time
}

type VulnRecords []VulnRecord

func (x VulnRecords) Find(key VulnRecordKey) *VulnRecord {
	for _, r := range x {
		if r.VulnRecordKey.RecordID() == key.RecordID() {
			return &r
		}
	}
	return nil
}

type VulnRecordKey interface {
	RecordID() RecordID
	RepoID() GitHubRepoID
}

var keySeparator = []byte{0x00, 0x00, 0x00, 0x00}

type RepoKey struct {
	ID GitHubRepoID
}

func (x *RepoKey) RepoID() GitHubRepoID { return x.ID }

// SarifKey is a key of vulnerability record for SARIF format
type SarifKey struct {
	RepoKey
	VulnID   string
	Location string
}

func (x *SarifKey) RecordID() RecordID {
	value := bytes.Join([][]byte{
		[]byte("sarif"),
		[]byte(x.ID.String()),
		[]byte(x.VulnID),
		[]byte(x.Location),
	}, keySeparator)

	// hash value by sha256
	h := sha256.New()
	_, _ = h.Write(value)
	hv := h.Sum(nil)

	return RecordID(hex.EncodeToString(hv))
}

// / TrivyLangPkgKey is a key of vulnerability record for Trivy format
type TrivyOSPkgKey struct {
	RepoKey
	VulnID  string
	OSType  string
	PkgName string
}

func (x *TrivyOSPkgKey) RecordID() RecordID {
	value := bytes.Join([][]byte{
		[]byte("trivy-os-pkg"),
		[]byte(x.ID.String()),
		[]byte(x.VulnID),
		[]byte(x.OSType),
		[]byte(x.PkgName),
	}, keySeparator)

	// hash value by sha256
	h := sha256.New()
	_, _ = h.Write(value)
	hv := h.Sum(nil)

	return RecordID(hex.EncodeToString(hv))
}
