package model

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"time"
)

type VulnRecord struct {
	RecordID

	RepoID         GitHubRepoID
	Owner          string
	RepoName       string
	IssueID        int
	IssueState     string
	LastModifiedAt *time.Time

	Description string
}

type VulnRecords []VulnRecord

func (x VulnRecords) Find(id RecordID) *VulnRecord {
	for _, r := range x {
		if r.RecordID == id {
			return &r
		}
	}
	return nil
}

var keySeparator = []byte{0x00, 0x00, 0x00, 0x00}

// SarifKey is a key of vulnerability record for SARIF format
type SarifKey struct {
	VulnID   string
	Location string
}

func (x SarifKey) RecordID() RecordID {
	value := bytes.Join([][]byte{
		[]byte("sarif"),
		[]byte(x.VulnID),
		[]byte(x.Location),
	}, keySeparator)

	// hash value by sha256
	h := sha256.New()
	_, _ = h.Write(value)
	hv := h.Sum(nil)

	return RecordID(hex.EncodeToString(hv))
}

// / TrivyLangPkgKey is a key of vulnerability record for Trivy format
type TrivyOSPkgKey struct {
	VulnID  string
	OSType  string
	PkgName string
}

func (x TrivyOSPkgKey) RecordID() RecordID {
	value := bytes.Join([][]byte{
		[]byte("trivy-os-pkg"),
		[]byte(x.VulnID),
		[]byte(x.OSType),
		[]byte(x.PkgName),
	}, keySeparator)

	// hash value by sha256
	h := sha256.New()
	_, _ = h.Write(value)
	hv := h.Sum(nil)

	return RecordID(hex.EncodeToString(hv))
}

// TrivyLangPkgKey is a key of vulnerability record for Trivy format
type TrivyLangPkgKey struct {
	VulnID  string
	Target  string
	PkgName string
	PkgPath string
}

func (x TrivyLangPkgKey) RecordID() RecordID {
	value := bytes.Join([][]byte{
		[]byte("trivy-lang-pkg"),
		[]byte(x.VulnID),
		[]byte(x.Target),
		[]byte(x.PkgName),
		[]byte(x.PkgPath),
	}, keySeparator)

	// hash value by sha256
	h := sha256.New()
	_, _ = h.Write(value)
	hv := h.Sum(nil)

	return RecordID(hex.EncodeToString(hv))
}
